<?xml version="1.0" encoding="UTF-8"?>
<configurationDescriptor version="100">
  <logicalFolder name="root" displayName="root" projectFiles="true" kind="ROOT">
    <df root="." name="0">
      <df name="data">
        <df name="rgbd_dataset_freiburg1_xyz">
          <df name="depth">
          </df>
          <df name="rgb">
          </df>
        </df>
      </df>
      <df name="libs">
        <df name="Eigen">
          <df name="bench">
            <df name="btl">
              <df name="actions">
                <in>action_aat_product.hh</in>
                <in>action_ata_product.hh</in>
                <in>action_atv_product.hh</in>
                <in>action_axpby.hh</in>
                <in>action_axpy.hh</in>
                <in>action_cholesky.hh</in>
                <in>action_ger.hh</in>
                <in>action_hessenberg.hh</in>
                <in>action_lu_decomp.hh</in>
                <in>action_lu_solve.hh</in>
                <in>action_matrix_matrix_product.hh</in>
                <in>action_matrix_matrix_product_bis.hh</in>
                <in>action_matrix_vector_product.hh</in>
                <in>action_partial_lu.hh</in>
                <in>action_rot.hh</in>
                <in>action_symv.hh</in>
                <in>action_syr2.hh</in>
                <in>action_trisolve.hh</in>
                <in>action_trisolve_matrix.hh</in>
                <in>action_trmm.hh</in>
                <in>basic_actions.hh</in>
              </df>
              <df name="cmake">
              </df>
              <df name="data">
                <in>gnuplot_common_settings.hh</in>
                <in>mean.cxx</in>
                <in>regularize.cxx</in>
                <in>smooth.cxx</in>
              </df>
              <df name="generic_bench">
                <df name="init">
                  <in>init_function.hh</in>
                  <in>init_matrix.hh</in>
                  <in>init_vector.hh</in>
                </df>
                <df name="static">
                  <in>bench_static.hh</in>
                  <in>intel_bench_fixed_size.hh</in>
                  <in>static_size_generator.hh</in>
                </df>
                <df name="timers">
                  <in>STL_perf_analyzer.hh</in>
                  <in>STL_timer.hh</in>
                  <in>mixed_perf_analyzer.hh</in>
                  <in>portable_perf_analyzer.hh</in>
                  <in>portable_perf_analyzer_old.hh</in>
                  <in>portable_timer.hh</in>
                  <in>x86_perf_analyzer.hh</in>
                  <in>x86_timer.hh</in>
                </df>
                <df name="utils">
                  <in>size_lin_log.hh</in>
                  <in>size_log.hh</in>
                  <in>utilities.h</in>
                  <in>xy_file.hh</in>
                </df>
                <in>bench.hh</in>
                <in>bench_parameter.hh</in>
                <in>btl.hh</in>
              </df>
              <df name="libs">
                <df name="BLAS">
                  <in>blas.h</in>
                  <in>blas_interface.hh</in>
                  <in>blas_interface_impl.hh</in>
                  <in>c_interface_base.h</in>
                  <in>main.cpp</in>
                </df>
                <df name="blaze">
                  <in>blaze_interface.hh</in>
                  <in>main.cpp</in>
                </df>
                <df name="blitz">
                  <in>blitz_LU_solve_interface.hh</in>
                  <in>blitz_interface.hh</in>
                  <in>btl_blitz.cpp</in>
                  <in>btl_tiny_blitz.cpp</in>
                  <in>tiny_blitz_interface.hh</in>
                </df>
                <df name="eigen2">
                  <in>btl_tiny_eigen2.cpp</in>
                  <in>eigen2_interface.hh</in>
                  <in>main_adv.cpp</in>
                  <in>main_linear.cpp</in>
                  <in>main_matmat.cpp</in>
                  <in>main_vecmat.cpp</in>
                </df>
                <df name="eigen3">
                  <in>btl_tiny_eigen3.cpp</in>
                  <in>eigen3_interface.hh</in>
                  <in>main_adv.cpp</in>
                  <in>main_linear.cpp</in>
                  <in>main_matmat.cpp</in>
                  <in>main_vecmat.cpp</in>
                </df>
                <df name="gmm">
                  <in>gmm_LU_solve_interface.hh</in>
                  <in>gmm_interface.hh</in>
                  <in>main.cpp</in>
                </df>
                <df name="mtl4">
                  <in>main.cpp</in>
                  <in>mtl4_LU_solve_interface.hh</in>
                  <in>mtl4_interface.hh</in>
                </df>
                <df name="STL">
                  <in>STL_interface.hh</in>
                  <in>main.cpp</in>
                </df>
                <df name="tensors">
                  <in>main_linear.cpp</in>
                  <in>main_matmat.cpp</in>
                  <in>main_vecmat.cpp</in>
                  <in>tensor_interface.hh</in>
                </df>
                <df name="tvmet">
                  <in>main.cpp</in>
                  <in>tvmet_interface.hh</in>
                </df>
                <df name="ublas">
                  <in>main.cpp</in>
                  <in>ublas_interface.hh</in>
                </df>
              </df>
            </df>
            <df name="perf_monitoring">
              <df name="gemm">
                <in>gemm.cpp</in>
                <in>lazy_gemm.cpp</in>
              </df>
            </df>
            <df name="spbench">
              <in>sp_solver.cpp</in>
              <in>spbenchsolver.cpp</in>
              <in>spbenchsolver.h</in>
              <in>spbenchstyle.h</in>
              <in>test_sparseLU.cpp</in>
            </df>
            <df name="tensors">
              <in>benchmark.h</in>
              <in>benchmark_main.cc</in>
              <in>contraction_benchmarks_cpu.cc</in>
              <in>tensor_benchmarks.h</in>
              <in>tensor_benchmarks_cpu.cc</in>
              <in>tensor_benchmarks_sycl.cc</in>
            </df>
            <in>BenchSparseUtil.h</in>
            <in>BenchTimer.h</in>
            <in>BenchUtil.h</in>
            <in>analyze-blocking-sizes.cpp</in>
            <in>basicbenchmark.cpp</in>
            <in>basicbenchmark.h</in>
            <in>benchBlasGemm.cpp</in>
            <in>benchCholesky.cpp</in>
            <in>benchEigenSolver.cpp</in>
            <in>benchFFT.cpp</in>
            <in>benchGeometry.cpp</in>
            <in>benchVecAdd.cpp</in>
            <in>bench_gemm.cpp</in>
            <in>bench_norm.cpp</in>
            <in>bench_reverse.cpp</in>
            <in>bench_sum.cpp</in>
            <in>benchmark-blocking-sizes.cpp</in>
            <in>benchmark.cpp</in>
            <in>benchmarkSlice.cpp</in>
            <in>benchmarkX.cpp</in>
            <in>benchmarkXcwise.cpp</in>
            <in>check_cache_queries.cpp</in>
            <in>dense_solvers.cpp</in>
            <in>eig33.cpp</in>
            <in>geometry.cpp</in>
            <in>product_threshold.cpp</in>
            <in>quat_slerp.cpp</in>
            <in>quatmul.cpp</in>
            <in>sparse_cholesky.cpp</in>
            <in>sparse_dense_product.cpp</in>
            <in>sparse_lu.cpp</in>
            <in>sparse_product.cpp</in>
            <in>sparse_randomsetter.cpp</in>
            <in>sparse_setter.cpp</in>
            <in>sparse_transpose.cpp</in>
            <in>sparse_trisolver.cpp</in>
            <in>spmv.cpp</in>
            <in>vdw_new.cpp</in>
          </df>
          <df name="blas">
            <df name="f2c">
              <in>chbmv.c</in>
              <in>chpmv.c</in>
              <in>complexdots.c</in>
              <in>ctbmv.c</in>
              <in>d_cnjg.c</in>
              <in>datatypes.h</in>
              <in>drotm.c</in>
              <in>drotmg.c</in>
              <in>dsbmv.c</in>
              <in>dspmv.c</in>
              <in>dtbmv.c</in>
              <in>lsame.c</in>
              <in>r_cnjg.c</in>
              <in>srotm.c</in>
              <in>srotmg.c</in>
              <in>ssbmv.c</in>
              <in>sspmv.c</in>
              <in>stbmv.c</in>
              <in>zhbmv.c</in>
              <in>zhpmv.c</in>
              <in>ztbmv.c</in>
            </df>
            <df name="fortran">
              <in>complexdots.f</in>
            </df>
            <df name="testing">
              <in>cblat1.f</in>
              <in>cblat2.f</in>
              <in>cblat3.f</in>
              <in>dblat1.f</in>
              <in>dblat2.f</in>
              <in>dblat3.f</in>
              <in>sblat1.f</in>
              <in>sblat2.f</in>
              <in>sblat3.f</in>
              <in>zblat1.f</in>
              <in>zblat2.f</in>
              <in>zblat3.f</in>
            </df>
            <in>BandTriangularSolver.h</in>
            <in>GeneralRank1Update.h</in>
            <in>PackedSelfadjointProduct.h</in>
            <in>PackedTriangularMatrixVector.h</in>
            <in>PackedTriangularSolverVector.h</in>
            <in>Rank2Update.h</in>
            <in>common.h</in>
            <in>complex_double.cpp</in>
            <in>complex_single.cpp</in>
            <in>double.cpp</in>
            <in>level1_cplx_impl.h</in>
            <in>level1_impl.h</in>
            <in>level1_real_impl.h</in>
            <in>level2_cplx_impl.h</in>
            <in>level2_impl.h</in>
            <in>level2_real_impl.h</in>
            <in>level3_impl.h</in>
            <in>single.cpp</in>
            <in>xerbla.cpp</in>
          </df>
          <df name="cmake">
          </df>
          <df name="debug">
            <df name="gdb">
            </df>
            <df name="msvc">
            </df>
          </df>
          <df name="demos">
            <df name="mandelbrot">
              <in>mandelbrot.cpp</in>
              <in>mandelbrot.h</in>
            </df>
            <df name="mix_eigen_and_c">
              <in>binary_library.cpp</in>
              <in>binary_library.h</in>
              <in>example.c</in>
            </df>
            <df name="opengl">
              <in>camera.cpp</in>
              <in>camera.h</in>
              <in>gpuhelper.cpp</in>
              <in>gpuhelper.h</in>
              <in>icosphere.cpp</in>
              <in>icosphere.h</in>
              <in>quaternion_demo.cpp</in>
              <in>quaternion_demo.h</in>
              <in>trackball.cpp</in>
              <in>trackball.h</in>
            </df>
          </df>
          <df name="doc">
            <df name="examples">
              <in>CustomizingEigen_Inheritance.cpp</in>
              <in>Cwise_erf.cpp</in>
              <in>Cwise_erfc.cpp</in>
              <in>Cwise_lgamma.cpp</in>
              <in>DenseBase_middleCols_int.cpp</in>
              <in>DenseBase_middleRows_int.cpp</in>
              <in>DenseBase_template_int_middleCols.cpp</in>
              <in>DenseBase_template_int_middleRows.cpp</in>
              <in>QuickStart_example.cpp</in>
              <in>QuickStart_example2_dynamic.cpp</in>
              <in>QuickStart_example2_fixed.cpp</in>
              <in>TemplateKeyword_flexible.cpp</in>
              <in>TemplateKeyword_simple.cpp</in>
              <in>TutorialInplaceLU.cpp</in>
              <in>TutorialLinAlgComputeTwice.cpp</in>
              <in>TutorialLinAlgExComputeSolveError.cpp</in>
              <in>TutorialLinAlgExSolveColPivHouseholderQR.cpp</in>
              <in>TutorialLinAlgExSolveLDLT.cpp</in>
              <in>TutorialLinAlgInverseDeterminant.cpp</in>
              <in>TutorialLinAlgRankRevealing.cpp</in>
              <in>TutorialLinAlgSVDSolve.cpp</in>
              <in>TutorialLinAlgSelfAdjointEigenSolver.cpp</in>
              <in>TutorialLinAlgSetThreshold.cpp</in>
              <in>Tutorial_ArrayClass_accessors.cpp</in>
              <in>Tutorial_ArrayClass_addition.cpp</in>
              <in>Tutorial_ArrayClass_cwise_other.cpp</in>
              <in>Tutorial_ArrayClass_interop.cpp</in>
              <in>Tutorial_ArrayClass_interop_matrix.cpp</in>
              <in>Tutorial_ArrayClass_mult.cpp</in>
              <in>Tutorial_BlockOperations_block_assignment.cpp</in>
              <in>Tutorial_BlockOperations_colrow.cpp</in>
              <in>Tutorial_BlockOperations_corner.cpp</in>
              <in>Tutorial_BlockOperations_print_block.cpp</in>
              <in>Tutorial_BlockOperations_vector.cpp</in>
              <in>Tutorial_PartialLU_solve.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_broadcast_1nn.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_broadcast_simple.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_broadcast_simple_rowwise.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_colwise.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_maxnorm.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_reductions_bool.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_reductions_norm.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_reductions_operatornorm.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_rowwise.cpp</in>
              <in>Tutorial_ReductionsVisitorsBroadcasting_visitors.cpp</in>
              <in>Tutorial_simple_example_dynamic_size.cpp</in>
              <in>Tutorial_simple_example_fixed_size.cpp</in>
              <in>class_Block.cpp</in>
              <in>class_CwiseBinaryOp.cpp</in>
              <in>class_CwiseUnaryOp.cpp</in>
              <in>class_CwiseUnaryOp_ptrfun.cpp</in>
              <in>class_FixedBlock.cpp</in>
              <in>class_FixedVectorBlock.cpp</in>
              <in>class_VectorBlock.cpp</in>
              <in>function_taking_eigenbase.cpp</in>
              <in>function_taking_ref.cpp</in>
              <in>make_circulant.cpp</in>
              <in>make_circulant2.cpp</in>
              <in>matrixfree_cg.cpp</in>
              <in>nullary_indexing.cpp</in>
              <in>tut_arithmetic_add_sub.cpp</in>
              <in>tut_arithmetic_dot_cross.cpp</in>
              <in>tut_arithmetic_matrix_mul.cpp</in>
              <in>tut_arithmetic_redux_basic.cpp</in>
              <in>tut_arithmetic_scalar_mul_div.cpp</in>
              <in>tut_matrix_coefficient_accessors.cpp</in>
              <in>tut_matrix_resize.cpp</in>
              <in>tut_matrix_resize_fixed_size.cpp</in>
            </df>
            <df name="snippets">
              <in>AngleAxis_mimic_euler.cpp</in>
              <in>BiCGSTAB_simple.cpp</in>
              <in>BiCGSTAB_step_by_step.cpp</in>
              <in>ColPivHouseholderQR_solve.cpp</in>
              <in>ComplexEigenSolver_compute.cpp</in>
              <in>ComplexEigenSolver_eigenvalues.cpp</in>
              <in>ComplexEigenSolver_eigenvectors.cpp</in>
              <in>ComplexSchur_compute.cpp</in>
              <in>ComplexSchur_matrixT.cpp</in>
              <in>ComplexSchur_matrixU.cpp</in>
              <in>Cwise_abs.cpp</in>
              <in>Cwise_abs2.cpp</in>
              <in>Cwise_acos.cpp</in>
              <in>Cwise_arg.cpp</in>
              <in>Cwise_array_power_array.cpp</in>
              <in>Cwise_asin.cpp</in>
              <in>Cwise_atan.cpp</in>
              <in>Cwise_boolean_and.cpp</in>
              <in>Cwise_boolean_not.cpp</in>
              <in>Cwise_boolean_or.cpp</in>
              <in>Cwise_boolean_xor.cpp</in>
              <in>Cwise_ceil.cpp</in>
              <in>Cwise_cos.cpp</in>
              <in>Cwise_cosh.cpp</in>
              <in>Cwise_cube.cpp</in>
              <in>Cwise_equal_equal.cpp</in>
              <in>Cwise_exp.cpp</in>
              <in>Cwise_floor.cpp</in>
              <in>Cwise_greater.cpp</in>
              <in>Cwise_greater_equal.cpp</in>
              <in>Cwise_inverse.cpp</in>
              <in>Cwise_isFinite.cpp</in>
              <in>Cwise_isInf.cpp</in>
              <in>Cwise_isNaN.cpp</in>
              <in>Cwise_less.cpp</in>
              <in>Cwise_less_equal.cpp</in>
              <in>Cwise_log.cpp</in>
              <in>Cwise_log10.cpp</in>
              <in>Cwise_max.cpp</in>
              <in>Cwise_min.cpp</in>
              <in>Cwise_minus.cpp</in>
              <in>Cwise_minus_equal.cpp</in>
              <in>Cwise_not_equal.cpp</in>
              <in>Cwise_plus.cpp</in>
              <in>Cwise_plus_equal.cpp</in>
              <in>Cwise_pow.cpp</in>
              <in>Cwise_product.cpp</in>
              <in>Cwise_quotient.cpp</in>
              <in>Cwise_round.cpp</in>
              <in>Cwise_scalar_power_array.cpp</in>
              <in>Cwise_sign.cpp</in>
              <in>Cwise_sin.cpp</in>
              <in>Cwise_sinh.cpp</in>
              <in>Cwise_slash_equal.cpp</in>
              <in>Cwise_sqrt.cpp</in>
              <in>Cwise_square.cpp</in>
              <in>Cwise_tan.cpp</in>
              <in>Cwise_tanh.cpp</in>
              <in>Cwise_times_equal.cpp</in>
              <in>DenseBase_LinSpaced.cpp</in>
              <in>DenseBase_LinSpacedInt.cpp</in>
              <in>DenseBase_LinSpaced_seq.cpp</in>
              <in>DenseBase_setLinSpaced.cpp</in>
              <in>DirectionWise_hnormalized.cpp</in>
              <in>DirectionWise_replicate.cpp</in>
              <in>DirectionWise_replicate_int.cpp</in>
              <in>EigenSolver_EigenSolver_MatrixType.cpp</in>
              <in>EigenSolver_compute.cpp</in>
              <in>EigenSolver_eigenvalues.cpp</in>
              <in>EigenSolver_eigenvectors.cpp</in>
              <in>EigenSolver_pseudoEigenvectors.cpp</in>
              <in>FullPivHouseholderQR_solve.cpp</in>
              <in>FullPivLU_image.cpp</in>
              <in>FullPivLU_kernel.cpp</in>
              <in>FullPivLU_solve.cpp</in>
              <in>GeneralizedEigenSolver.cpp</in>
              <in>HessenbergDecomposition_compute.cpp</in>
              <in>HessenbergDecomposition_matrixH.cpp</in>
              <in>HessenbergDecomposition_packedMatrix.cpp</in>
              <in>HouseholderQR_householderQ.cpp</in>
              <in>HouseholderQR_solve.cpp</in>
              <in>HouseholderSequence_HouseholderSequence.cpp</in>
              <in>IOFormat.cpp</in>
              <in>JacobiSVD_basic.cpp</in>
              <in>Jacobi_makeGivens.cpp</in>
              <in>Jacobi_makeJacobi.cpp</in>
              <in>LLT_example.cpp</in>
              <in>LLT_solve.cpp</in>
              <in>LeastSquaresNormalEquations.cpp</in>
              <in>LeastSquaresQR.cpp</in>
              <in>Map_general_stride.cpp</in>
              <in>Map_inner_stride.cpp</in>
              <in>Map_outer_stride.cpp</in>
              <in>Map_placement_new.cpp</in>
              <in>Map_simple.cpp</in>
              <in>MatrixBase_adjoint.cpp</in>
              <in>MatrixBase_all.cpp</in>
              <in>MatrixBase_applyOnTheLeft.cpp</in>
              <in>MatrixBase_applyOnTheRight.cpp</in>
              <in>MatrixBase_array.cpp</in>
              <in>MatrixBase_array_const.cpp</in>
              <in>MatrixBase_asDiagonal.cpp</in>
              <in>MatrixBase_block_int_int.cpp</in>
              <in>MatrixBase_block_int_int_int_int.cpp</in>
              <in>MatrixBase_bottomLeftCorner_int_int.cpp</in>
              <in>MatrixBase_bottomRightCorner_int_int.cpp</in>
              <in>MatrixBase_bottomRows_int.cpp</in>
              <in>MatrixBase_cast.cpp</in>
              <in>MatrixBase_col.cpp</in>
              <in>MatrixBase_colwise.cpp</in>
              <in>MatrixBase_computeInverseAndDetWithCheck.cpp</in>
              <in>MatrixBase_computeInverseWithCheck.cpp</in>
              <in>MatrixBase_cwiseAbs.cpp</in>
              <in>MatrixBase_cwiseAbs2.cpp</in>
              <in>MatrixBase_cwiseEqual.cpp</in>
              <in>MatrixBase_cwiseInverse.cpp</in>
              <in>MatrixBase_cwiseMax.cpp</in>
              <in>MatrixBase_cwiseMin.cpp</in>
              <in>MatrixBase_cwiseNotEqual.cpp</in>
              <in>MatrixBase_cwiseProduct.cpp</in>
              <in>MatrixBase_cwiseQuotient.cpp</in>
              <in>MatrixBase_cwiseSign.cpp</in>
              <in>MatrixBase_cwiseSqrt.cpp</in>
              <in>MatrixBase_diagonal.cpp</in>
              <in>MatrixBase_diagonal_int.cpp</in>
              <in>MatrixBase_diagonal_template_int.cpp</in>
              <in>MatrixBase_eigenvalues.cpp</in>
              <in>MatrixBase_end_int.cpp</in>
              <in>MatrixBase_eval.cpp</in>
              <in>MatrixBase_fixedBlock_int_int.cpp</in>
              <in>MatrixBase_hnormalized.cpp</in>
              <in>MatrixBase_homogeneous.cpp</in>
              <in>MatrixBase_identity.cpp</in>
              <in>MatrixBase_identity_int_int.cpp</in>
              <in>MatrixBase_inverse.cpp</in>
              <in>MatrixBase_isDiagonal.cpp</in>
              <in>MatrixBase_isIdentity.cpp</in>
              <in>MatrixBase_isOnes.cpp</in>
              <in>MatrixBase_isOrthogonal.cpp</in>
              <in>MatrixBase_isUnitary.cpp</in>
              <in>MatrixBase_isZero.cpp</in>
              <in>MatrixBase_leftCols_int.cpp</in>
              <in>MatrixBase_noalias.cpp</in>
              <in>MatrixBase_ones.cpp</in>
              <in>MatrixBase_ones_int.cpp</in>
              <in>MatrixBase_ones_int_int.cpp</in>
              <in>MatrixBase_operatorNorm.cpp</in>
              <in>MatrixBase_prod.cpp</in>
              <in>MatrixBase_random.cpp</in>
              <in>MatrixBase_random_int.cpp</in>
              <in>MatrixBase_random_int_int.cpp</in>
              <in>MatrixBase_replicate.cpp</in>
              <in>MatrixBase_replicate_int_int.cpp</in>
              <in>MatrixBase_reverse.cpp</in>
              <in>MatrixBase_rightCols_int.cpp</in>
              <in>MatrixBase_row.cpp</in>
              <in>MatrixBase_rowwise.cpp</in>
              <in>MatrixBase_segment_int_int.cpp</in>
              <in>MatrixBase_select.cpp</in>
              <in>MatrixBase_selfadjointView.cpp</in>
              <in>MatrixBase_set.cpp</in>
              <in>MatrixBase_setIdentity.cpp</in>
              <in>MatrixBase_setOnes.cpp</in>
              <in>MatrixBase_setRandom.cpp</in>
              <in>MatrixBase_setZero.cpp</in>
              <in>MatrixBase_start_int.cpp</in>
              <in>MatrixBase_template_int_bottomRows.cpp</in>
              <in>MatrixBase_template_int_end.cpp</in>
              <in>MatrixBase_template_int_int_block_int_int_int_int.cpp</in>
              <in>MatrixBase_template_int_int_bottomLeftCorner.cpp</in>
              <in>MatrixBase_template_int_int_bottomLeftCorner_int_int.cpp</in>
              <in>MatrixBase_template_int_int_bottomRightCorner.cpp</in>
              <in>MatrixBase_template_int_int_bottomRightCorner_int_int.cpp</in>
              <in>MatrixBase_template_int_int_topLeftCorner.cpp</in>
              <in>MatrixBase_template_int_int_topLeftCorner_int_int.cpp</in>
              <in>MatrixBase_template_int_int_topRightCorner.cpp</in>
              <in>MatrixBase_template_int_int_topRightCorner_int_int.cpp</in>
              <in>MatrixBase_template_int_leftCols.cpp</in>
              <in>MatrixBase_template_int_rightCols.cpp</in>
              <in>MatrixBase_template_int_segment.cpp</in>
              <in>MatrixBase_template_int_start.cpp</in>
              <in>MatrixBase_template_int_topRows.cpp</in>
              <in>MatrixBase_topLeftCorner_int_int.cpp</in>
              <in>MatrixBase_topRightCorner_int_int.cpp</in>
              <in>MatrixBase_topRows_int.cpp</in>
              <in>MatrixBase_transpose.cpp</in>
              <in>MatrixBase_triangularView.cpp</in>
              <in>MatrixBase_zero.cpp</in>
              <in>MatrixBase_zero_int.cpp</in>
              <in>MatrixBase_zero_int_int.cpp</in>
              <in>Matrix_resize_NoChange_int.cpp</in>
              <in>Matrix_resize_int.cpp</in>
              <in>Matrix_resize_int_NoChange.cpp</in>
              <in>Matrix_resize_int_int.cpp</in>
              <in>Matrix_setConstant_int.cpp</in>
              <in>Matrix_setConstant_int_int.cpp</in>
              <in>Matrix_setIdentity_int_int.cpp</in>
              <in>Matrix_setOnes_int.cpp</in>
              <in>Matrix_setOnes_int_int.cpp</in>
              <in>Matrix_setRandom_int.cpp</in>
              <in>Matrix_setRandom_int_int.cpp</in>
              <in>Matrix_setZero_int.cpp</in>
              <in>Matrix_setZero_int_int.cpp</in>
              <in>PartialPivLU_solve.cpp</in>
              <in>PartialRedux_count.cpp</in>
              <in>PartialRedux_maxCoeff.cpp</in>
              <in>PartialRedux_minCoeff.cpp</in>
              <in>PartialRedux_norm.cpp</in>
              <in>PartialRedux_prod.cpp</in>
              <in>PartialRedux_squaredNorm.cpp</in>
              <in>PartialRedux_sum.cpp</in>
              <in>RealQZ_compute.cpp</in>
              <in>RealSchur_RealSchur_MatrixType.cpp</in>
              <in>RealSchur_compute.cpp</in>
              <in>SelfAdjointEigenSolver_SelfAdjointEigenSolver.cpp</in>
              <in>SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType.cpp</in>
              <in>SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType2.cpp</in>
              <in>SelfAdjointEigenSolver_compute_MatrixType.cpp</in>
              <in>SelfAdjointEigenSolver_compute_MatrixType2.cpp</in>
              <in>SelfAdjointEigenSolver_eigenvalues.cpp</in>
              <in>SelfAdjointEigenSolver_eigenvectors.cpp</in>
              <in>SelfAdjointEigenSolver_operatorInverseSqrt.cpp</in>
              <in>SelfAdjointEigenSolver_operatorSqrt.cpp</in>
              <in>SelfAdjointView_eigenvalues.cpp</in>
              <in>SelfAdjointView_operatorNorm.cpp</in>
              <in>SparseMatrix_coeffs.cpp</in>
              <in>TopicAliasing_block.cpp</in>
              <in>TopicAliasing_block_correct.cpp</in>
              <in>TopicAliasing_cwise.cpp</in>
              <in>TopicAliasing_mult1.cpp</in>
              <in>TopicAliasing_mult2.cpp</in>
              <in>TopicAliasing_mult3.cpp</in>
              <in>TopicAliasing_mult4.cpp</in>
              <in>TopicAliasing_mult5.cpp</in>
              <in>TopicStorageOrders_example.cpp</in>
              <in>Triangular_solve.cpp</in>
              <in>Tridiagonalization_Tridiagonalization_MatrixType.cpp</in>
              <in>Tridiagonalization_compute.cpp</in>
              <in>Tridiagonalization_decomposeInPlace.cpp</in>
              <in>Tridiagonalization_diagonal.cpp</in>
              <in>Tridiagonalization_householderCoefficients.cpp</in>
              <in>Tridiagonalization_packedMatrix.cpp</in>
              <in>Tutorial_AdvancedInitialization_Block.cpp</in>
              <in>Tutorial_AdvancedInitialization_CommaTemporary.cpp</in>
              <in>Tutorial_AdvancedInitialization_Join.cpp</in>
              <in>Tutorial_AdvancedInitialization_LinSpaced.cpp</in>
              <in>Tutorial_AdvancedInitialization_ThreeWays.cpp</in>
              <in>Tutorial_AdvancedInitialization_Zero.cpp</in>
              <in>Tutorial_Map_rowmajor.cpp</in>
              <in>Tutorial_Map_using.cpp</in>
              <in>Tutorial_ReshapeMat2Mat.cpp</in>
              <in>Tutorial_ReshapeMat2Vec.cpp</in>
              <in>Tutorial_SlicingCol.cpp</in>
              <in>Tutorial_SlicingVec.cpp</in>
              <in>Tutorial_commainit_01.cpp</in>
              <in>Tutorial_commainit_01b.cpp</in>
              <in>Tutorial_commainit_02.cpp</in>
              <in>Tutorial_solve_matrix_inverse.cpp</in>
              <in>Tutorial_solve_multiple_rhs.cpp</in>
              <in>Tutorial_solve_reuse_decomposition.cpp</in>
              <in>Tutorial_solve_singular.cpp</in>
              <in>Tutorial_solve_triangular.cpp</in>
              <in>Tutorial_solve_triangular_inplace.cpp</in>
              <in>VectorwiseOp_homogeneous.cpp</in>
              <in>Vectorwise_reverse.cpp</in>
              <in>class_FullPivLU.cpp</in>
              <in>tut_arithmetic_redux_minmax.cpp</in>
              <in>tut_arithmetic_transpose_aliasing.cpp</in>
              <in>tut_arithmetic_transpose_conjugate.cpp</in>
              <in>tut_arithmetic_transpose_inplace.cpp</in>
              <in>tut_matrix_assignment_resizing.cpp</in>
            </df>
            <df name="special_examples">
              <in>Tutorial_sparse_example.cpp</in>
              <in>Tutorial_sparse_example_details.cpp</in>
              <in>random_cpp11.cpp</in>
            </df>
            <in>tutorial.cpp</in>
          </df>
          <df name="Eigen">
            <df name="src">
              <df name="Cholesky">
                <in>LDLT.h</in>
                <in>LLT.h</in>
                <in>LLT_LAPACKE.h</in>
              </df>
              <df name="CholmodSupport">
                <in>CholmodSupport.h</in>
              </df>
              <df name="Core">
                <df name="arch">
                  <df name="AltiVec">
                    <in>Complex.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                  </df>
                  <df name="AVX">
                    <in>Complex.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                    <in>TypeCasting.h</in>
                  </df>
                  <df name="AVX512">
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                  </df>
                  <df name="CUDA">
                    <in>Complex.h</in>
                    <in>Half.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                    <in>PacketMathHalf.h</in>
                    <in>TypeCasting.h</in>
                  </df>
                  <df name="Default">
                    <in>Settings.h</in>
                  </df>
                  <df name="NEON">
                    <in>Complex.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                  </df>
                  <df name="SSE">
                    <in>Complex.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                    <in>TypeCasting.h</in>
                  </df>
                  <df name="ZVector">
                    <in>Complex.h</in>
                    <in>MathFunctions.h</in>
                    <in>PacketMath.h</in>
                  </df>
                </df>
                <df name="functors">
                  <in>AssignmentFunctors.h</in>
                  <in>BinaryFunctors.h</in>
                  <in>NullaryFunctors.h</in>
                  <in>StlFunctors.h</in>
                  <in>TernaryFunctors.h</in>
                  <in>UnaryFunctors.h</in>
                </df>
                <df name="products">
                  <in>GeneralBlockPanelKernel.h</in>
                  <in>GeneralMatrixMatrix.h</in>
                  <in>GeneralMatrixMatrixTriangular.h</in>
                  <in>GeneralMatrixMatrixTriangular_BLAS.h</in>
                  <in>GeneralMatrixMatrix_BLAS.h</in>
                  <in>GeneralMatrixVector.h</in>
                  <in>GeneralMatrixVector_BLAS.h</in>
                  <in>Parallelizer.h</in>
                  <in>SelfadjointMatrixMatrix.h</in>
                  <in>SelfadjointMatrixMatrix_BLAS.h</in>
                  <in>SelfadjointMatrixVector.h</in>
                  <in>SelfadjointMatrixVector_BLAS.h</in>
                  <in>SelfadjointProduct.h</in>
                  <in>SelfadjointRank2Update.h</in>
                  <in>TriangularMatrixMatrix.h</in>
                  <in>TriangularMatrixMatrix_BLAS.h</in>
                  <in>TriangularMatrixVector.h</in>
                  <in>TriangularMatrixVector_BLAS.h</in>
                  <in>TriangularSolverMatrix.h</in>
                  <in>TriangularSolverMatrix_BLAS.h</in>
                  <in>TriangularSolverVector.h</in>
                </df>
                <df name="util">
                  <in>BlasUtil.h</in>
                  <in>Constants.h</in>
                  <in>DisableStupidWarnings.h</in>
                  <in>ForwardDeclarations.h</in>
                  <in>MKL_support.h</in>
                  <in>Macros.h</in>
                  <in>Memory.h</in>
                  <in>Meta.h</in>
                  <in>NonMPL2.h</in>
                  <in>ReenableStupidWarnings.h</in>
                  <in>StaticAssert.h</in>
                  <in>XprHelper.h</in>
                </df>
                <in>Array.h</in>
                <in>ArrayBase.h</in>
                <in>ArrayWrapper.h</in>
                <in>Assign.h</in>
                <in>AssignEvaluator.h</in>
                <in>Assign_MKL.h</in>
                <in>BandMatrix.h</in>
                <in>Block.h</in>
                <in>BooleanRedux.h</in>
                <in>CommaInitializer.h</in>
                <in>ConditionEstimator.h</in>
                <in>CoreEvaluators.h</in>
                <in>CoreIterators.h</in>
                <in>CwiseBinaryOp.h</in>
                <in>CwiseNullaryOp.h</in>
                <in>CwiseTernaryOp.h</in>
                <in>CwiseUnaryOp.h</in>
                <in>CwiseUnaryView.h</in>
                <in>DenseBase.h</in>
                <in>DenseCoeffsBase.h</in>
                <in>DenseStorage.h</in>
                <in>Diagonal.h</in>
                <in>DiagonalMatrix.h</in>
                <in>DiagonalProduct.h</in>
                <in>Dot.h</in>
                <in>EigenBase.h</in>
                <in>ForceAlignedAccess.h</in>
                <in>Fuzzy.h</in>
                <in>GeneralProduct.h</in>
                <in>GenericPacketMath.h</in>
                <in>GlobalFunctions.h</in>
                <in>IO.h</in>
                <in>Inverse.h</in>
                <in>Map.h</in>
                <in>MapBase.h</in>
                <in>MathFunctions.h</in>
                <in>MathFunctionsImpl.h</in>
                <in>Matrix.h</in>
                <in>MatrixBase.h</in>
                <in>NestByValue.h</in>
                <in>NoAlias.h</in>
                <in>NumTraits.h</in>
                <in>PermutationMatrix.h</in>
                <in>PlainObjectBase.h</in>
                <in>Product.h</in>
                <in>ProductEvaluators.h</in>
                <in>Random.h</in>
                <in>Redux.h</in>
                <in>Ref.h</in>
                <in>Replicate.h</in>
                <in>ReturnByValue.h</in>
                <in>Reverse.h</in>
                <in>Select.h</in>
                <in>SelfAdjointView.h</in>
                <in>SelfCwiseBinaryOp.h</in>
                <in>Solve.h</in>
                <in>SolveTriangular.h</in>
                <in>SolverBase.h</in>
                <in>StableNorm.h</in>
                <in>Stride.h</in>
                <in>Swap.h</in>
                <in>Transpose.h</in>
                <in>Transpositions.h</in>
                <in>TriangularMatrix.h</in>
                <in>VectorBlock.h</in>
                <in>VectorwiseOp.h</in>
                <in>Visitor.h</in>
              </df>
              <df name="Eigenvalues">
                <in>ComplexEigenSolver.h</in>
                <in>ComplexSchur.h</in>
                <in>ComplexSchur_LAPACKE.h</in>
                <in>EigenSolver.h</in>
                <in>GeneralizedEigenSolver.h</in>
                <in>GeneralizedSelfAdjointEigenSolver.h</in>
                <in>HessenbergDecomposition.h</in>
                <in>MatrixBaseEigenvalues.h</in>
                <in>RealQZ.h</in>
                <in>RealSchur.h</in>
                <in>RealSchur_LAPACKE.h</in>
                <in>SelfAdjointEigenSolver.h</in>
                <in>SelfAdjointEigenSolver_LAPACKE.h</in>
                <in>Tridiagonalization.h</in>
              </df>
              <df name="Geometry">
                <df name="arch">
                  <in>Geometry_SSE.h</in>
                </df>
                <in>AlignedBox.h</in>
                <in>AngleAxis.h</in>
                <in>EulerAngles.h</in>
                <in>Homogeneous.h</in>
                <in>Hyperplane.h</in>
                <in>OrthoMethods.h</in>
                <in>ParametrizedLine.h</in>
                <in>Quaternion.h</in>
                <in>Rotation2D.h</in>
                <in>RotationBase.h</in>
                <in>Scaling.h</in>
                <in>Transform.h</in>
                <in>Translation.h</in>
                <in>Umeyama.h</in>
              </df>
              <df name="Householder">
                <in>BlockHouseholder.h</in>
                <in>Householder.h</in>
                <in>HouseholderSequence.h</in>
              </df>
              <df name="IterativeLinearSolvers">
                <in>BasicPreconditioners.h</in>
                <in>BiCGSTAB.h</in>
                <in>ConjugateGradient.h</in>
                <in>IncompleteCholesky.h</in>
                <in>IncompleteLUT.h</in>
                <in>IterativeSolverBase.h</in>
                <in>LeastSquareConjugateGradient.h</in>
                <in>SolveWithGuess.h</in>
              </df>
              <df name="Jacobi">
                <in>Jacobi.h</in>
              </df>
              <df name="LU">
                <df name="arch">
                  <in>Inverse_SSE.h</in>
                </df>
                <in>Determinant.h</in>
                <in>FullPivLU.h</in>
                <in>InverseImpl.h</in>
                <in>PartialPivLU.h</in>
                <in>PartialPivLU_LAPACKE.h</in>
              </df>
              <df name="MetisSupport">
                <in>MetisSupport.h</in>
              </df>
              <df name="misc">
                <in>Image.h</in>
                <in>Kernel.h</in>
                <in>RealSvd2x2.h</in>
                <in>blas.h</in>
                <in>lapack.h</in>
                <in>lapacke.h</in>
                <in>lapacke_mangling.h</in>
              </df>
              <df name="OrderingMethods">
                <in>Amd.h</in>
                <in>Eigen_Colamd.h</in>
                <in>Ordering.h</in>
              </df>
              <df name="PardisoSupport">
                <in>PardisoSupport.h</in>
              </df>
              <df name="PaStiXSupport">
                <in>PaStiXSupport.h</in>
              </df>
              <df name="plugins">
                <in>ArrayCwiseBinaryOps.h</in>
                <in>ArrayCwiseUnaryOps.h</in>
                <in>BlockMethods.h</in>
                <in>CommonCwiseBinaryOps.h</in>
                <in>CommonCwiseUnaryOps.h</in>
                <in>MatrixCwiseBinaryOps.h</in>
                <in>MatrixCwiseUnaryOps.h</in>
              </df>
              <df name="QR">
                <in>ColPivHouseholderQR.h</in>
                <in>ColPivHouseholderQR_LAPACKE.h</in>
                <in>CompleteOrthogonalDecomposition.h</in>
                <in>FullPivHouseholderQR.h</in>
                <in>HouseholderQR.h</in>
                <in>HouseholderQR_LAPACKE.h</in>
              </df>
              <df name="SparseCholesky">
                <in>SimplicialCholesky.h</in>
                <in>SimplicialCholesky_impl.h</in>
              </df>
              <df name="SparseCore">
                <in>AmbiVector.h</in>
                <in>CompressedStorage.h</in>
                <in>ConservativeSparseSparseProduct.h</in>
                <in>MappedSparseMatrix.h</in>
                <in>SparseAssign.h</in>
                <in>SparseBlock.h</in>
                <in>SparseColEtree.h</in>
                <in>SparseCompressedBase.h</in>
                <in>SparseCwiseBinaryOp.h</in>
                <in>SparseCwiseUnaryOp.h</in>
                <in>SparseDenseProduct.h</in>
                <in>SparseDiagonalProduct.h</in>
                <in>SparseDot.h</in>
                <in>SparseFuzzy.h</in>
                <in>SparseMap.h</in>
                <in>SparseMatrix.h</in>
                <in>SparseMatrixBase.h</in>
                <in>SparsePermutation.h</in>
                <in>SparseProduct.h</in>
                <in>SparseRedux.h</in>
                <in>SparseRef.h</in>
                <in>SparseSelfAdjointView.h</in>
                <in>SparseSolverBase.h</in>
                <in>SparseSparseProductWithPruning.h</in>
                <in>SparseTranspose.h</in>
                <in>SparseTriangularView.h</in>
                <in>SparseUtil.h</in>
                <in>SparseVector.h</in>
                <in>SparseView.h</in>
                <in>TriangularSolver.h</in>
              </df>
              <df name="SparseLU">
                <in>SparseLU.h</in>
                <in>SparseLUImpl.h</in>
                <in>SparseLU_Memory.h</in>
                <in>SparseLU_Structs.h</in>
                <in>SparseLU_SupernodalMatrix.h</in>
                <in>SparseLU_Utils.h</in>
                <in>SparseLU_column_bmod.h</in>
                <in>SparseLU_column_dfs.h</in>
                <in>SparseLU_copy_to_ucol.h</in>
                <in>SparseLU_gemm_kernel.h</in>
                <in>SparseLU_heap_relax_snode.h</in>
                <in>SparseLU_kernel_bmod.h</in>
                <in>SparseLU_panel_bmod.h</in>
                <in>SparseLU_panel_dfs.h</in>
                <in>SparseLU_pivotL.h</in>
                <in>SparseLU_pruneL.h</in>
                <in>SparseLU_relax_snode.h</in>
              </df>
              <df name="SparseQR">
                <in>SparseQR.h</in>
              </df>
              <df name="SPQRSupport">
                <in>SuiteSparseQRSupport.h</in>
              </df>
              <df name="StlSupport">
                <in>StdDeque.h</in>
                <in>StdList.h</in>
                <in>StdVector.h</in>
                <in>details.h</in>
              </df>
              <df name="SuperLUSupport">
                <in>SuperLUSupport.h</in>
              </df>
              <df name="SVD">
                <in>BDCSVD.h</in>
                <in>JacobiSVD.h</in>
                <in>JacobiSVD_LAPACKE.h</in>
                <in>SVDBase.h</in>
                <in>UpperBidiagonalization.h</in>
              </df>
              <df name="UmfPackSupport">
                <in>UmfPackSupport.h</in>
              </df>
            </df>
            <in>Dense</in>
            <in>Eigen</in>
          </df>
          <df name="failtest">
            <in>bdcsvd_int.cpp</in>
            <in>block_nonconst_ctor_on_const_xpr_0.cpp</in>
            <in>block_nonconst_ctor_on_const_xpr_1.cpp</in>
            <in>block_nonconst_ctor_on_const_xpr_2.cpp</in>
            <in>block_on_const_type_actually_const_0.cpp</in>
            <in>block_on_const_type_actually_const_1.cpp</in>
            <in>colpivqr_int.cpp</in>
            <in>const_qualified_block_method_retval_0.cpp</in>
            <in>const_qualified_block_method_retval_1.cpp</in>
            <in>const_qualified_diagonal_method_retval.cpp</in>
            <in>const_qualified_transpose_method_retval.cpp</in>
            <in>cwiseunaryview_nonconst_ctor_on_const_xpr.cpp</in>
            <in>cwiseunaryview_on_const_type_actually_const.cpp</in>
            <in>diagonal_nonconst_ctor_on_const_xpr.cpp</in>
            <in>diagonal_on_const_type_actually_const.cpp</in>
            <in>eigensolver_cplx.cpp</in>
            <in>eigensolver_int.cpp</in>
            <in>failtest_sanity_check.cpp</in>
            <in>fullpivlu_int.cpp</in>
            <in>fullpivqr_int.cpp</in>
            <in>jacobisvd_int.cpp</in>
            <in>ldlt_int.cpp</in>
            <in>llt_int.cpp</in>
            <in>map_nonconst_ctor_on_const_ptr_0.cpp</in>
            <in>map_nonconst_ctor_on_const_ptr_1.cpp</in>
            <in>map_nonconst_ctor_on_const_ptr_2.cpp</in>
            <in>map_nonconst_ctor_on_const_ptr_3.cpp</in>
            <in>map_nonconst_ctor_on_const_ptr_4.cpp</in>
            <in>map_on_const_type_actually_const_0.cpp</in>
            <in>map_on_const_type_actually_const_1.cpp</in>
            <in>partialpivlu_int.cpp</in>
            <in>qr_int.cpp</in>
            <in>ref_1.cpp</in>
            <in>ref_2.cpp</in>
            <in>ref_3.cpp</in>
            <in>ref_4.cpp</in>
            <in>ref_5.cpp</in>
            <in>selfadjointview_nonconst_ctor_on_const_xpr.cpp</in>
            <in>selfadjointview_on_const_type_actually_const.cpp</in>
            <in>sparse_ref_1.cpp</in>
            <in>sparse_ref_2.cpp</in>
            <in>sparse_ref_3.cpp</in>
            <in>sparse_ref_4.cpp</in>
            <in>sparse_ref_5.cpp</in>
            <in>sparse_storage_mismatch.cpp</in>
            <in>swap_1.cpp</in>
            <in>swap_2.cpp</in>
            <in>ternary_1.cpp</in>
            <in>ternary_2.cpp</in>
            <in>transpose_nonconst_ctor_on_const_xpr.cpp</in>
            <in>transpose_on_const_type_actually_const.cpp</in>
            <in>triangularview_nonconst_ctor_on_const_xpr.cpp</in>
            <in>triangularview_on_const_type_actually_const.cpp</in>
          </df>
          <df name="lapack">
            <in>cholesky.cpp</in>
            <in>clacgv.f</in>
            <in>cladiv.f</in>
            <in>clarf.f</in>
            <in>clarfb.f</in>
            <in>clarfg.f</in>
            <in>clarft.f</in>
            <in>complex_double.cpp</in>
            <in>complex_single.cpp</in>
            <in>dladiv.f</in>
            <in>dlamch.f</in>
            <in>dlapy2.f</in>
            <in>dlapy3.f</in>
            <in>dlarf.f</in>
            <in>dlarfb.f</in>
            <in>dlarfg.f</in>
            <in>dlarft.f</in>
            <in>double.cpp</in>
            <in>dsecnd_NONE.f</in>
            <in>eigenvalues.cpp</in>
            <in>ilaclc.f</in>
            <in>ilaclr.f</in>
            <in>iladlc.f</in>
            <in>iladlr.f</in>
            <in>ilaslc.f</in>
            <in>ilaslr.f</in>
            <in>ilazlc.f</in>
            <in>ilazlr.f</in>
            <in>lapack_common.h</in>
            <in>lu.cpp</in>
            <in>second_NONE.f</in>
            <in>single.cpp</in>
            <in>sladiv.f</in>
            <in>slamch.f</in>
            <in>slapy2.f</in>
            <in>slapy3.f</in>
            <in>slarf.f</in>
            <in>slarfb.f</in>
            <in>slarfg.f</in>
            <in>slarft.f</in>
            <in>svd.cpp</in>
            <in>zlacgv.f</in>
            <in>zladiv.f</in>
            <in>zlarf.f</in>
            <in>zlarfb.f</in>
            <in>zlarfg.f</in>
            <in>zlarft.f</in>
          </df>
          <df name="scripts">
            <in>eigen_gen_credits.cpp</in>
          </df>
          <df name="test">
            <in>adjoint.cpp</in>
            <in>array.cpp</in>
            <in>array_for_matrix.cpp</in>
            <in>array_of_string.cpp</in>
            <in>array_replicate.cpp</in>
            <in>array_reverse.cpp</in>
            <in>bandmatrix.cpp</in>
            <in>basicstuff.cpp</in>
            <in>bdcsvd.cpp</in>
            <in>bicgstab.cpp</in>
            <in>block.cpp</in>
            <in>boostmultiprec.cpp</in>
            <in>bug1213.cpp</in>
            <in>bug1213.h</in>
            <in>bug1213_main.cpp</in>
            <in>cholesky.cpp</in>
            <in>cholmod_support.cpp</in>
            <in>commainitializer.cpp</in>
            <in>conjugate_gradient.cpp</in>
            <in>conservative_resize.cpp</in>
            <in>corners.cpp</in>
            <in>ctorleak.cpp</in>
            <in>cuda_common.h</in>
            <in>denseLM.cpp</in>
            <in>dense_storage.cpp</in>
            <in>determinant.cpp</in>
            <in>diagonal.cpp</in>
            <in>diagonalmatrices.cpp</in>
            <in>dontalign.cpp</in>
            <in>dynalloc.cpp</in>
            <in>eigen2support.cpp</in>
            <in>eigensolver_complex.cpp</in>
            <in>eigensolver_generalized_real.cpp</in>
            <in>eigensolver_generic.cpp</in>
            <in>eigensolver_selfadjoint.cpp</in>
            <in>evaluator_common.h</in>
            <in>evaluators.cpp</in>
            <in>exceptions.cpp</in>
            <in>fastmath.cpp</in>
            <in>first_aligned.cpp</in>
            <in>geo_alignedbox.cpp</in>
            <in>geo_eulerangles.cpp</in>
            <in>geo_homogeneous.cpp</in>
            <in>geo_hyperplane.cpp</in>
            <in>geo_orthomethods.cpp</in>
            <in>geo_parametrizedline.cpp</in>
            <in>geo_quaternion.cpp</in>
            <in>geo_transformations.cpp</in>
            <in>half_float.cpp</in>
            <in>hessenberg.cpp</in>
            <in>householder.cpp</in>
            <in>incomplete_cholesky.cpp</in>
            <in>inplace_decomposition.cpp</in>
            <in>integer_types.cpp</in>
            <in>inverse.cpp</in>
            <in>is_same_dense.cpp</in>
            <in>jacobi.cpp</in>
            <in>jacobisvd.cpp</in>
            <in>linearstructure.cpp</in>
            <in>lscg.cpp</in>
            <in>lu.cpp</in>
            <in>main.h</in>
            <in>mapped_matrix.cpp</in>
            <in>mapstaticmethods.cpp</in>
            <in>mapstride.cpp</in>
            <in>meta.cpp</in>
            <in>metis_support.cpp</in>
            <in>miscmatrices.cpp</in>
            <in>mixingtypes.cpp</in>
            <in>mpl2only.cpp</in>
            <in>nesting_ops.cpp</in>
            <in>nomalloc.cpp</in>
            <in>nullary.cpp</in>
            <in>packetmath.cpp</in>
            <in>pardiso_support.cpp</in>
            <in>pastix_support.cpp</in>
            <in>permutationmatrices.cpp</in>
            <in>prec_inverse_4x4.cpp</in>
            <in>product.h</in>
            <in>product_extra.cpp</in>
            <in>product_large.cpp</in>
            <in>product_mmtr.cpp</in>
            <in>product_notemporary.cpp</in>
            <in>product_selfadjoint.cpp</in>
            <in>product_small.cpp</in>
            <in>product_symm.cpp</in>
            <in>product_syrk.cpp</in>
            <in>product_trmm.cpp</in>
            <in>product_trmv.cpp</in>
            <in>product_trsolve.cpp</in>
            <in>qr.cpp</in>
            <in>qr_colpivoting.cpp</in>
            <in>qr_fullpivoting.cpp</in>
            <in>qtvector.cpp</in>
            <in>rand.cpp</in>
            <in>real_qz.cpp</in>
            <in>redux.cpp</in>
            <in>ref.cpp</in>
            <in>resize.cpp</in>
            <in>rvalue_types.cpp</in>
            <in>schur_complex.cpp</in>
            <in>schur_real.cpp</in>
            <in>selfadjoint.cpp</in>
            <in>simplicial_cholesky.cpp</in>
            <in>sizeof.cpp</in>
            <in>sizeoverflow.cpp</in>
            <in>smallvectors.cpp</in>
            <in>sparse.h</in>
            <in>sparseLM.cpp</in>
            <in>sparse_basic.cpp</in>
            <in>sparse_block.cpp</in>
            <in>sparse_permutations.cpp</in>
            <in>sparse_product.cpp</in>
            <in>sparse_ref.cpp</in>
            <in>sparse_solver.h</in>
            <in>sparse_solvers.cpp</in>
            <in>sparse_vector.cpp</in>
            <in>sparselu.cpp</in>
            <in>sparseqr.cpp</in>
            <in>special_numbers.cpp</in>
            <in>spqr_support.cpp</in>
            <in>stable_norm.cpp</in>
            <in>stddeque.cpp</in>
            <in>stddeque_overload.cpp</in>
            <in>stdlist.cpp</in>
            <in>stdlist_overload.cpp</in>
            <in>stdvector.cpp</in>
            <in>stdvector_overload.cpp</in>
            <in>superlu_support.cpp</in>
            <in>svd_common.h</in>
            <in>svd_fill.h</in>
            <in>swap.cpp</in>
            <in>triangular.cpp</in>
            <in>umeyama.cpp</in>
            <in>umfpack_support.cpp</in>
            <in>unalignedassert.cpp</in>
            <in>unalignedcount.cpp</in>
            <in>upperbidiagonalization.cpp</in>
            <in>vectorization_logic.cpp</in>
            <in>vectorwiseop.cpp</in>
            <in>visitor.cpp</in>
            <in>zerosized.cpp</in>
          </df>
          <df name="unsupported">
            <df name="bench">
              <in>bench_svd.cpp</in>
            </df>
            <df name="doc">
              <df name="examples">
                <in>BVH_Example.cpp</in>
                <in>EulerAngles.cpp</in>
                <in>FFT.cpp</in>
                <in>MatrixExponential.cpp</in>
                <in>MatrixFunction.cpp</in>
                <in>MatrixLogarithm.cpp</in>
                <in>MatrixPower.cpp</in>
                <in>MatrixPower_optimal.cpp</in>
                <in>MatrixSine.cpp</in>
                <in>MatrixSinh.cpp</in>
                <in>MatrixSquareRoot.cpp</in>
                <in>PolynomialSolver1.cpp</in>
                <in>PolynomialUtils1.cpp</in>
              </df>
              <df name="snippets">
              </df>
            </df>
            <df name="Eigen">
              <df name="CXX11">
                <df name="src">
                  <df name="Tensor">
                    <in>Tensor.h</in>
                    <in>TensorArgMax.h</in>
                    <in>TensorAssign.h</in>
                    <in>TensorBase.h</in>
                    <in>TensorBroadcasting.h</in>
                    <in>TensorChipping.h</in>
                    <in>TensorConcatenation.h</in>
                    <in>TensorContraction.h</in>
                    <in>TensorContractionBlocking.h</in>
                    <in>TensorContractionCuda.h</in>
                    <in>TensorContractionMapper.h</in>
                    <in>TensorContractionThreadPool.h</in>
                    <in>TensorConversion.h</in>
                    <in>TensorConvolution.h</in>
                    <in>TensorCostModel.h</in>
                    <in>TensorCustomOp.h</in>
                    <in>TensorDevice.h</in>
                    <in>TensorDeviceCuda.h</in>
                    <in>TensorDeviceDefault.h</in>
                    <in>TensorDeviceSycl.h</in>
                    <in>TensorDeviceThreadPool.h</in>
                    <in>TensorDimensionList.h</in>
                    <in>TensorDimensions.h</in>
                    <in>TensorEvalTo.h</in>
                    <in>TensorEvaluator.h</in>
                    <in>TensorExecutor.h</in>
                    <in>TensorExpr.h</in>
                    <in>TensorFFT.h</in>
                    <in>TensorFixedSize.h</in>
                    <in>TensorForcedEval.h</in>
                    <in>TensorForwardDeclarations.h</in>
                    <in>TensorFunctors.h</in>
                    <in>TensorGenerator.h</in>
                    <in>TensorGlobalFunctions.h</in>
                    <in>TensorIO.h</in>
                    <in>TensorImagePatch.h</in>
                    <in>TensorIndexList.h</in>
                    <in>TensorInflation.h</in>
                    <in>TensorInitializer.h</in>
                    <in>TensorIntDiv.h</in>
                    <in>TensorLayoutSwap.h</in>
                    <in>TensorMacros.h</in>
                    <in>TensorMap.h</in>
                    <in>TensorMeta.h</in>
                    <in>TensorMorphing.h</in>
                    <in>TensorPadding.h</in>
                    <in>TensorPatch.h</in>
                    <in>TensorRandom.h</in>
                    <in>TensorReduction.h</in>
                    <in>TensorReductionCuda.h</in>
                    <in>TensorReductionSycl.h</in>
                    <in>TensorRef.h</in>
                    <in>TensorReverse.h</in>
                    <in>TensorScan.h</in>
                    <in>TensorShuffling.h</in>
                    <in>TensorStorage.h</in>
                    <in>TensorStriding.h</in>
                    <in>TensorSycl.h</in>
                    <in>TensorSyclConvertToDeviceExpression.h</in>
                    <in>TensorSyclExprConstructor.h</in>
                    <in>TensorSyclExtractAccessor.h</in>
                    <in>TensorSyclExtractFunctors.h</in>
                    <in>TensorSyclLeafCount.h</in>
                    <in>TensorSyclPlaceHolderExpr.h</in>
                    <in>TensorSyclRun.h</in>
                    <in>TensorSyclTuple.h</in>
                    <in>TensorTraits.h</in>
                    <in>TensorUInt128.h</in>
                    <in>TensorVolumePatch.h</in>
                  </df>
                  <df name="TensorSymmetry">
                    <df name="util">
                      <in>TemplateGroupTheory.h</in>
                    </df>
                    <in>DynamicSymmetry.h</in>
                    <in>StaticSymmetry.h</in>
                    <in>Symmetry.h</in>
                  </df>
                  <df name="ThreadPool">
                    <in>EventCount.h</in>
                    <in>NonBlockingThreadPool.h</in>
                    <in>RunQueue.h</in>
                    <in>SimpleThreadPool.h</in>
                    <in>ThreadEnvironment.h</in>
                    <in>ThreadLocal.h</in>
                    <in>ThreadPoolInterface.h</in>
                    <in>ThreadYield.h</in>
                  </df>
                  <df name="util">
                    <in>CXX11Meta.h</in>
                    <in>CXX11Workarounds.h</in>
                    <in>EmulateArray.h</in>
                    <in>EmulateCXX11Meta.h</in>
                    <in>MaxSizeVector.h</in>
                  </df>
                </df>
              </df>
              <df name="src">
                <df name="AutoDiff">
                  <in>AutoDiffJacobian.h</in>
                  <in>AutoDiffScalar.h</in>
                  <in>AutoDiffVector.h</in>
                </df>
                <df name="BVH">
                  <in>BVAlgorithms.h</in>
                  <in>KdBVH.h</in>
                </df>
                <df name="Eigenvalues">
                  <in>ArpackSelfAdjointEigenSolver.h</in>
                </df>
                <df name="EulerAngles">
                  <in>EulerAngles.h</in>
                  <in>EulerSystem.h</in>
                </df>
                <df name="FFT">
                  <in>ei_fftw_impl.h</in>
                  <in>ei_kissfft_impl.h</in>
                </df>
                <df name="IterativeSolvers">
                  <in>ConstrainedConjGrad.h</in>
                  <in>DGMRES.h</in>
                  <in>GMRES.h</in>
                  <in>IncompleteLU.h</in>
                  <in>IterationController.h</in>
                  <in>MINRES.h</in>
                  <in>Scaling.h</in>
                </df>
                <df name="KroneckerProduct">
                  <in>KroneckerTensorProduct.h</in>
                </df>
                <df name="LevenbergMarquardt">
                  <in>LMcovar.h</in>
                  <in>LMonestep.h</in>
                  <in>LMpar.h</in>
                  <in>LMqrsolv.h</in>
                  <in>LevenbergMarquardt.h</in>
                </df>
                <df name="MatrixFunctions">
                  <in>MatrixExponential.h</in>
                  <in>MatrixFunction.h</in>
                  <in>MatrixLogarithm.h</in>
                  <in>MatrixPower.h</in>
                  <in>MatrixSquareRoot.h</in>
                  <in>StemFunction.h</in>
                </df>
                <df name="MoreVectorization">
                  <in>MathFunctions.h</in>
                </df>
                <df name="NonLinearOptimization">
                  <in>HybridNonLinearSolver.h</in>
                  <in>LevenbergMarquardt.h</in>
                  <in>chkder.h</in>
                  <in>covar.h</in>
                  <in>dogleg.h</in>
                  <in>fdjac1.h</in>
                  <in>lmpar.h</in>
                  <in>qrsolv.h</in>
                  <in>r1mpyq.h</in>
                  <in>r1updt.h</in>
                  <in>rwupdt.h</in>
                </df>
                <df name="NumericalDiff">
                  <in>NumericalDiff.h</in>
                </df>
                <df name="Polynomials">
                  <in>Companion.h</in>
                  <in>PolynomialSolver.h</in>
                  <in>PolynomialUtils.h</in>
                </df>
                <df name="Skyline">
                  <in>SkylineInplaceLU.h</in>
                  <in>SkylineMatrix.h</in>
                  <in>SkylineMatrixBase.h</in>
                  <in>SkylineProduct.h</in>
                  <in>SkylineStorage.h</in>
                  <in>SkylineUtil.h</in>
                </df>
                <df name="SparseExtra">
                  <in>BlockOfDynamicSparseMatrix.h</in>
                  <in>BlockSparseMatrix.h</in>
                  <in>DynamicSparseMatrix.h</in>
                  <in>MarketIO.h</in>
                  <in>MatrixMarketIterator.h</in>
                  <in>RandomSetter.h</in>
                </df>
                <df name="SpecialFunctions">
                  <df name="arch">
                    <df name="CUDA">
                      <in>CudaSpecialFunctions.h</in>
                    </df>
                  </df>
                  <in>SpecialFunctionsArrayAPI.h</in>
                  <in>SpecialFunctionsFunctors.h</in>
                  <in>SpecialFunctionsHalf.h</in>
                  <in>SpecialFunctionsImpl.h</in>
                  <in>SpecialFunctionsPacketMath.h</in>
                </df>
                <df name="Splines">
                  <in>Spline.h</in>
                  <in>SplineFitting.h</in>
                  <in>SplineFwd.h</in>
                </df>
              </df>
            </df>
            <df name="test">
              <df name="mpreal">
                <in>mpreal.h</in>
              </df>
              <in>BVH.cpp</in>
              <in>EulerAngles.cpp</in>
              <in>FFT.cpp</in>
              <in>FFTW.cpp</in>
              <in>NonLinearOptimization.cpp</in>
              <in>NumericalDiff.cpp</in>
              <in>alignedvector3.cpp</in>
              <in>autodiff.cpp</in>
              <in>autodiff_scalar.cpp</in>
              <in>cxx11_eventcount.cpp</in>
              <in>cxx11_meta.cpp</in>
              <in>cxx11_non_blocking_thread_pool.cpp</in>
              <in>cxx11_runqueue.cpp</in>
              <in>cxx11_tensor_argmax.cpp</in>
              <in>cxx11_tensor_assign.cpp</in>
              <in>cxx11_tensor_broadcast_sycl.cpp</in>
              <in>cxx11_tensor_broadcasting.cpp</in>
              <in>cxx11_tensor_casts.cpp</in>
              <in>cxx11_tensor_chipping.cpp</in>
              <in>cxx11_tensor_comparisons.cpp</in>
              <in>cxx11_tensor_concatenation.cpp</in>
              <in>cxx11_tensor_const.cpp</in>
              <in>cxx11_tensor_contraction.cpp</in>
              <in>cxx11_tensor_convolution.cpp</in>
              <in>cxx11_tensor_custom_index.cpp</in>
              <in>cxx11_tensor_custom_op.cpp</in>
              <in>cxx11_tensor_device_sycl.cpp</in>
              <in>cxx11_tensor_dimension.cpp</in>
              <in>cxx11_tensor_empty.cpp</in>
              <in>cxx11_tensor_expr.cpp</in>
              <in>cxx11_tensor_fft.cpp</in>
              <in>cxx11_tensor_fixed_size.cpp</in>
              <in>cxx11_tensor_forced_eval.cpp</in>
              <in>cxx11_tensor_forced_eval_sycl.cpp</in>
              <in>cxx11_tensor_generator.cpp</in>
              <in>cxx11_tensor_ifft.cpp</in>
              <in>cxx11_tensor_image_patch.cpp</in>
              <in>cxx11_tensor_index_list.cpp</in>
              <in>cxx11_tensor_inflation.cpp</in>
              <in>cxx11_tensor_intdiv.cpp</in>
              <in>cxx11_tensor_io.cpp</in>
              <in>cxx11_tensor_layout_swap.cpp</in>
              <in>cxx11_tensor_lvalue.cpp</in>
              <in>cxx11_tensor_map.cpp</in>
              <in>cxx11_tensor_math.cpp</in>
              <in>cxx11_tensor_mixed_indices.cpp</in>
              <in>cxx11_tensor_morphing.cpp</in>
              <in>cxx11_tensor_notification.cpp</in>
              <in>cxx11_tensor_of_complex.cpp</in>
              <in>cxx11_tensor_of_const_values.cpp</in>
              <in>cxx11_tensor_of_strings.cpp</in>
              <in>cxx11_tensor_padding.cpp</in>
              <in>cxx11_tensor_patch.cpp</in>
              <in>cxx11_tensor_random.cpp</in>
              <in>cxx11_tensor_reduction.cpp</in>
              <in>cxx11_tensor_reduction_sycl.cpp</in>
              <in>cxx11_tensor_ref.cpp</in>
              <in>cxx11_tensor_reverse.cpp</in>
              <in>cxx11_tensor_roundings.cpp</in>
              <in>cxx11_tensor_scan.cpp</in>
              <in>cxx11_tensor_shuffling.cpp</in>
              <in>cxx11_tensor_simple.cpp</in>
              <in>cxx11_tensor_striding.cpp</in>
              <in>cxx11_tensor_sugar.cpp</in>
              <in>cxx11_tensor_sycl.cpp</in>
              <in>cxx11_tensor_symmetry.cpp</in>
              <in>cxx11_tensor_thread_pool.cpp</in>
              <in>cxx11_tensor_uint128.cpp</in>
              <in>cxx11_tensor_volume_patch.cpp</in>
              <in>dgmres.cpp</in>
              <in>forward_adolc.cpp</in>
              <in>gmres.cpp</in>
              <in>kronecker_product.cpp</in>
              <in>levenberg_marquardt.cpp</in>
              <in>matrix_exponential.cpp</in>
              <in>matrix_function.cpp</in>
              <in>matrix_functions.h</in>
              <in>matrix_power.cpp</in>
              <in>matrix_square_root.cpp</in>
              <in>minres.cpp</in>
              <in>mpreal_support.cpp</in>
              <in>openglsupport.cpp</in>
              <in>polynomialsolver.cpp</in>
              <in>polynomialutils.cpp</in>
              <in>sparse_extra.cpp</in>
              <in>special_functions.cpp</in>
              <in>splines.cpp</in>
            </df>
          </df>
        </df>
        <df name="FreeImage">
          <df name="x32">
            <in>FreeImage.h</in>
          </df>
          <df name="x64">
            <in>FreeImage.h</in>
          </df>
        </df>
      </df>
      <in>Eigen.h</in>
      <in>FreeImageHelper.cpp</in>
      <in>FreeImageHelper.h</in>
      <in>VirtualSensor.h</in>
      <in>main.cpp</in>
    </df>
  </logicalFolder>
  <projectmakefile>Makefile</projectmakefile>
  <confs>
    <conf name="Default" type="0">
      <toolsSet>
        <developmentServer>localhost</developmentServer>
        <platform>2</platform>
      </toolsSet>
      <compile>
        <compiledirpicklist>
          <compiledirpicklistitem>.</compiledirpicklistitem>
          <compiledirpicklistitem>${AUTO_FOLDER}</compiledirpicklistitem>
        </compiledirpicklist>
        <compiledir>${AUTO_FOLDER}</compiledir>
        <compilecommandpicklist>
          <compilecommandpicklistitem>${MAKE} ${ITEM_NAME}.o</compilecommandpicklistitem>
          <compilecommandpicklistitem>${AUTO_COMPILE}</compilecommandpicklistitem>
        </compilecommandpicklist>
        <compilecommand>${AUTO_COMPILE}</compilecommand>
      </compile>
      <dbx_gdbdebugger version="1">
        <gdb_pathmaps>
        </gdb_pathmaps>
        <gdb_interceptlist>
          <gdbinterceptoptions gdb_all="false" gdb_unhandled="true" gdb_unexpected="true"/>
        </gdb_interceptlist>
        <gdb_options>
          <DebugOptions>
          </DebugOptions>
        </gdb_options>
        <gdb_buildfirst gdb_buildfirst_overriden="false" gdb_buildfirst_old="false"/>
      </dbx_gdbdebugger>
      <nativedebugger version="1">
        <engine>gdb</engine>
      </nativedebugger>
      <runprofile version="9">
        <runcommandpicklist>
          <runcommandpicklistitem>"${OUTPUT_PATH}"</runcommandpicklistitem>
        </runcommandpicklist>
        <runcommand>"${OUTPUT_PATH}"</runcommand>
        <rundir>.</rundir>
        <buildfirst>false</buildfirst>
        <terminal-type>0</terminal-type>
        <remove-instrumentation>0</remove-instrumentation>
        <environment>
        </environment>
      </runprofile>
    </conf>
  </confs>
</configurationDescriptor>
